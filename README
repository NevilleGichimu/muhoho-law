# Muhoho Law - Case Management System

A modern, full-stack case management system built with Nuxt 3, TypeScript, and Supabase for law firms to efficiently manage their cases, clients, and appointments.

## 🚀 Features

### Case Management
- **CRUD Operations**: Create, read, update, and delete cases
- **Case Tracking**: Monitor case stages, status, and billing information
- **Client Association**: Link cases to specific clients
- **Lawyer Assignment**: Assign lead lawyers to cases
- **Opposing Party Management**: Track opposing parties and their lawyers

### Case Fields
- Case number and title
- Case stage and status
- Case type classification
- Client and lawyer associations
- Filing dates
- Opposing party details
- Billing status tracking
- Detailed case descriptions

### User Experience
- **Real-time Notifications**: Toast notifications for all operations
- **Form State Management**: Persistent form state across sessions
- **Error Handling**: Comprehensive error management with user feedback
- **Responsive Design**: Built with Nuxt UI for modern, responsive interfaces

## 🛠️ Tech Stack

- **Frontend**: Nuxt 3, Vue 3, TypeScript
- **UI Framework**: Nuxt UI
- **Backend**: Nuxt 3 Server API
- **Database**: Supabase (PostgreSQL)
- **State Management**: Nuxt useState composables
- **Styling**: Tailwind CSS (via Nuxt UI)

## 📦 Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/NevilleGichimu/muhoho-law.git
   cd muhoho-law
   ```

2. **Install dependencies**
   ```bash
   npm install
   # or
   yarn install
   # or
   pnpm install
   ```

3. **Environment Setup**
   Create a `.env` file in the root directory:
   ```env
   NUXT_SUPABASE_URL=your_supabase_url
   NUXT_SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
   NUXT_SUPABASE_ANON_KEY=your_anon_key
   ```

4. **Start the development server**
   ```bash
   npm run dev
   # or
   yarn dev
   # or
   pnpm dev
   ```

## 📁 Project Structure

```
muhoho-law/
├── composables/
│   └── useCases.ts          # Case management composable
├── server/
│   └── api/
│       ├── cases/           # Case API endpoints
│       │   ├── index.get.ts    # Get all cases
│       │   ├── index.post.ts   # Create case
│       │   ├── index.put.ts    # Update case
│       │   ├── index.delete.ts # Delete case
│       │   └── single.get.ts   # Get single case
│       └── appointments/    # Appointment API endpoints
├── pages/                   # Application pages
├── components/             # Vue components
└── types/                  # TypeScript type definitions
```

## 🔧 API Endpoints

### Cases
- `GET /api/cases` - Retrieve all cases
- `GET /api/cases/single?id={id}` - Retrieve a specific case
- `POST /api/cases` - Create a new case
- `PUT /api/cases?id={id}` - Update an existing case
- `DELETE /api/cases?id={id}` - Delete a case

### Appointments
- `DELETE /api/appointments?id={id}` - Delete an appointment

## 💻 Usage Example

```typescript
// Using the case management composable
const { 
  cases, 
  caseFormState, 
  getAllCases, 
  createCase, 
  updateCase, 
  deleteCase 
} = useCase();

// Fetch all cases
await getAllCases();

// Create a new case
await createCase({
  case_number: "CASE001",
  title: "Sample Case",
  case_stage: "Investigation",
  status: "Active",
  // ... other fields
});

// Update a case
await updateCase("case-id", updatedData);

// Delete a case
await deleteCase("case-id");
```

## 🗄️ Database Schema

The system uses Supabase with the following main tables:

### Cases Table
- `id` (UUID, Primary Key)
- `case_number` (String)
- `title` (String)
- `case_stage` (String)
- `status` (String)
- `case_type` (String)
- `client_id` (UUID, Foreign Key)
- `description` (Text)
- `lead_lawyer_id` (UUID, Foreign Key)
- `filed_date` (Date)
- `opposing_party` (String)
- `opposing_lawyer` (String)
- `billing_status` (String)
- `created_at` (Timestamp)
- `updated_at` (Timestamp)

## 🔐 Security

- Server-side validation for all API endpoints
- Supabase Row Level Security (RLS) policies
- Environment variable protection for sensitive data
- Input sanitization and error handling

## 🧪 Development

### Prerequisites
- Node.js 18+ 
- npm/yarn/pnpm
- Supabase account and project

### Scripts
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run preview      # Preview production build
npm run postinstall  # Prepare Nuxt
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 👨‍💻 Author

**Neville Gichimu**
- GitHub: [@NevilleGichimu](https://github.com/NevilleGichimu)

## 🙏 Acknowledgments

- Nuxt.js team for the amazing framework
- Supabase for the backend infrastructure
- Nuxt UI for the component library

---

For more information, please visit the [documentation](https://nuxt.com) or contact the development team.
